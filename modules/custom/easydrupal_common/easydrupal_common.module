<?php
/**
 * @file
 * Contains easydrupal_common.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\schema_metatag\SchemaMetatagManager;
use Drupal\votingapi\VoteResultFunctionManager;

/**
 * Implements hook_help().
 */
function easydrupal_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.easydrupal_common':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Setting the common functionality of the site.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Load all meta tags for this page, then separate out the structured data.
 */
function easydrupal_common_page_attachments_alter(array &$attachments) {

  if (empty($attachments['#attached']['html_head'])) {
    return;
  }

  // Collect tags added by Schema Metatag into structured data array.
  $items = SchemaMetatagManager::parseJsonld($attachments['#attached']['html_head']);

  if (count($items) > 0) {
    foreach ($items['@graph'] as $key => &$graph) {
      if (isset($graph['aggregateRating']) &&
        ($graph['@type'] == 'TechArticle' || $graph['@type'] == 'Article')) {
        // Load the current node.
        $node = \Drupal::routeMatch()->getParameter('node');
        // Get rating from votingapi.
        $results = [];
        $result = db_select('votingapi_result', 'v')
          ->fields('v', ['type', 'function', 'value'])
          ->condition('entity_type', 'node')
          ->condition('entity_id', $node->id())
          ->execute();
        while ($row = $result->fetchAssoc()) {
          $results[$row['type']][$row['function']] = $row['value'];
        }

        if (!empty($results)) {
          $graph['aggregateRating'] = [
            "@type" => "AggregateRating",
            "ratingValue" => $results['vote']['vote_average'],
            "bestRating" => 5,
            "worstRating" => 1,
            "ratingCount" => $results['vote']['vote_count'],
          ];
        }
      }
    }
  }

  // Update JSON data.
  $jsonld = SchemaMetatagManager::encodeJsonld($items);
  if (!empty($jsonld)) {
    $attachments['#attached']['html_head']['schema_metatag'] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#value' => $jsonld,
        '#attributes' => ['type' => 'application/ld+json'],
      ],
      'schema_metatag',
    ];
  }

}
